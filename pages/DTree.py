import pandas as pd
import streamlit as st
from sklearn import tree
from sklearn.tree import DecisionTreeClassifier
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import numpy as np

st.set_page_config(page_title="‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û", page_icon="‚ù§Ô∏è")

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á ---
st.title("ü©∫ ‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ Decision Tree")
st.markdown("---")
st.markdown("‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏• *Decision Tree* ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û")

# ‡πÉ‡∏ä‡πâ st.cache_resource ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Ñ‡∏ä‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏ù‡∏ô‡πÅ‡∏•‡πâ‡∏ß
@st.cache_resource
def train_model(X_train, y_train):
    with st.spinner('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• Decision Tree...'):
        ModelDtree = DecisionTreeClassifier()
        dtree = ModelDtree.fit(X_train, y_train)
    st.success("‚ú® ‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    return dtree

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ---
st.subheader("üìÅ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
uploaded_file = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV", type="csv")

if uploaded_file is not None:
    try:
        df = pd.read_csv(uploaded_file)
        st.info("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        st.write("‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 10 ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
        st.dataframe(df.head(10))

        # --- ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
        target_column = 'Risk_Level_Num'
        features = [
            'Respiratory_Rate', 'Oxygen_Saturation', 'O2_Scale',
            'Systolic_BP', 'Heart_Rate', 'Temperature',
            'Consciousness', 'On_Oxygen'
        ]
        
        missing_cols = [col for col in features + [target_column] if col not in df.columns]
        if missing_cols:
            st.error(f"‚ùå *‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô:* {', '.join(missing_cols)}")
        else:
            X = df[features]
            y = df[target_column]
            x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=200)

            # --- ‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• ---
            dtree = train_model(x_train, y_train)

            # --- ‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ---
            st.subheader("‚úçÔ∏è ‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå")
            st.markdown("---")

            col1, col2 = st.columns(2)
            
            feature_labels = {
                'Respiratory_Rate': '‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏¢‡πÉ‡∏à',
                'Oxygen_Saturation': '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏≠‡∏≠‡∏Å‡∏ã‡∏¥‡πÄ‡∏à‡∏ô',
                'O2_Scale': '‡∏£‡∏∞‡∏î‡∏±‡∏ö O2 (1-2)',
                'Systolic_BP': '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏ã‡∏¥‡∏™‡πÇ‡∏ï‡∏•‡∏¥‡∏Å',
                'Heart_Rate': '‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏±‡∏ß‡πÉ‡∏à',
                'Temperature': '‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥',
                'Consciousness': '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ï‡∏±‡∏ß',
                'On_Oxygen': '‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡∏Å‡∏ã‡∏¥‡πÄ‡∏à‡∏ô'
            }

            user_input = {}
            with col1:
                user_input['Respiratory_Rate'] = st.number_input(f'‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: {feature_labels["Respiratory_Rate"]}', min_value=0, value=20, step=1)
                user_input['Oxygen_Saturation'] = st.number_input(f'‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: {feature_labels["Oxygen_Saturation"]}', min_value=0, value=95, step=1)
                user_input['O2_Scale'] = st.selectbox(f'‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: {feature_labels["O2_Scale"]}', options=[1, 2], index=0)
                user_input['Systolic_BP'] = st.number_input(f'‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: {feature_labels["Systolic_BP"]}', min_value=0, value=120, step=1)
            
            with col2:
                user_input['Heart_Rate'] = st.number_input(f'‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: {feature_labels["Heart_Rate"]}', min_value=0, value=80, step=1)
                user_input['Temperature'] = st.number_input(f'‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: {feature_labels["Temperature"]}', min_value=0.0, value=37.0, step=0.1)
                selected_consciousness = st.radio(f'‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: {feature_labels["Consciousness"]}', options=['‡∏ï‡∏∑‡πà‡∏ô‡∏ï‡∏±‡∏ß (A)', '‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á (P)'])
                user_input['Consciousness'] = 1 if selected_consciousness == '‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á (P)' else 0
                selected_on_oxygen = st.radio(f'‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: {feature_labels["On_Oxygen"]}', options=['‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö', '‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö'])
                user_input['On_Oxygen'] = 1 if selected_on_oxygen == '‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö' else 0

            if st.button("‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏ú‡∏•", type="primary"):
                x_input = [[user_input[feature] for feature in features]]
                y_predict2 = dtree.predict(x_input)
                
                st.write("---")
                st.subheader("### üí° ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå:")
                if y_predict2[0] == 2:
                    st.error("‚ö†Ô∏è *‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á*")
                elif y_predict2[0] == 1:
                    st.warning("üü† *‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥*")
                else:
                    st.success("üü¢ *‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á*")

            # --- ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û ---
            st.markdown("---")
            st.subheader("üìà ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•")
            y_predict = dtree.predict(x_test)
            score = accuracy_score(y_test, y_predict)
            
            st.metric(label="‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• (Accuracy Score)", value=f"{int(score * 100)} %")

            st.subheader("üå≥ ‡πÅ‡∏ú‡∏ô‡∏ú‡∏±‡∏á Decision Tree")
            fig, ax = plt.subplots(figsize=(20, 15))
            tree.plot_tree(dtree, feature_names=features, class_names=['No Risk', 'Low Risk', 'High Risk'], ax=ax, filled=True, rounded=True, fontsize=10)
            st.pyplot(fig)

    except Exception as e:
        st.error(f"‚ùå *‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå*: {e}")
else:
    st.info("‚¨ÜÔ∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")